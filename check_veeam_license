#!/usr/bin/python
#####################################################
#
# Veeam Backup servers licence expiration check
#
# Last modified	 : 08.10.2021
# Author	 : Allan Resin
# Version	 : 1.5.1
#
#####################################################

#Import all needed modules
from __future__ import print_function
import sys, getopt
import argparse
import requests
import time
import json
from datetime import datetime

#####################################################
#
# Set the URL of the Veeam SPC server + port of the API endpoint
varURL = "https://URL_VEEAM:1281"
#
# Set the username and password for the user that have an access to the API
varUser = "API_USER"
varPasswd = "API_USER_PASS"
#
# Change the threshold for alerts on Centreon.
varOk = 15          #Before how many days it will be OK
varWarning = 15     #After how many days it will be WARNING
varCritical = 0     #At how many days it will be CRITICAL
#
#####################################################


#Add the --host argument
parser=argparse.ArgumentParser()
parser.add_argument('--host', help='Specify the veeam server that you want to check for the licence. ex')
parser.add_argument('--force', nargs='?', default=None, help='If you want to force an hostname, it will override the --host arg. Not mandatory')
args=parser.parse_args()

#Check to quit the script in case of the arg isn't specified
if (args.host is None):
  print("usage: check_veeam_licence.py [-h] [--host HOST]")
  print("error: argument --host: expected one argument")
  sys.exit(2)

#Set some variables for after
licenceID = None

#Check if the --force argument is provided. If yes, it's used to force another hostname.
if args.force is not None:
    hostArg = args.force.upper()
    pass
else :
    hostArg = args.host.upper()

#Create a payload that will ask the API to login and get back the Auth Key
def apiGet_token():
    headers = {
    "Connection": "close",
    "Authorization": "Bearer",
    "Content-Type": "application/json",
    }
    data = "grant_type=password&username="+varUser+"&password="+varPasswd
    url = varURL+'/token'
    response = requests.post(url, data=data, headers=headers)
    return response

#Create a payload that will ask the API to get all Veeam Backup servers licence infos
def apiGet_licenceID(token):
    headers = {
    "Connection": "close",
    "Authorization": "Bearer "+token,
    }
    url = varURL+"/v2/licensing/backupserverLicenses"
    response2 = requests.get(url, headers=headers)
    return response2

#Create a payload that will ask the API to get all Veeam Cloud Connect licence infos
def apiGet_licenceCC(token):
    headers = {
    "Connection": "close",
    "Authorization": "Bearer "+token,
    }
    url = varURL+"/v2/licensing/cloudconnectLicenses"
    response3 = requests.get(url, headers=headers)
    return response3

#Try/Except for getting API response.
try:
    r = apiGet_token()
except requests.exceptions.RequestException as e:
    print("API CALL FAILED ... : ")
    print(e)
    raise "API CALL FAILED..."
    sys.exit(2)

#Load in JSON the response of the API
data_token = json.loads(r.content)


#Try/Except for getting API response. Sent as arg to function --> token
try:
    r2 = apiGet_licenceID(data_token["access_token"])
except requests.exceptions.RequestException as e:
    print("API CALL FAILED ... : ")
    print(e)
    raise "API CALL FAILED..."
    sys.exit(2)

#Try/Except for getting API response. Sent as arg to function --> token
try:
    r3 = apiGet_licenceCC(data_token["access_token"])
except requests.exceptions.RequestException as e:
    print("API CALL FAILED ... : ")
    print(e)
    raise "API CALL FAILED..."
    sys.exit(2)

#Get licence data in JSON
data_licences = json.loads(r2.content)

#Get CLoud Connect licence data in JSON
data_licencesCC = json.loads(r3.content)

#Itterate over the JSON data to take the licence expiration date when "backupServerName" is the same as the --host provided
for x in data_licences:
    if (x['backupServerName'] == hostArg):
        licenceID = x['id']
        licenceEXP = x['licenseExpirationDate']
        pass

#If no licence found, stop the script
if (licenceID is None):
    for x in data_licencesCC:
        if (x['backupServerName'] == hostArg):
            licenceID = x['id']
            licenceEXP = x['licenseExpirationDate']
            pass
        else:
            print("Licence not found for the given Veeam server. Exiting ...")
            sys.exit(1)

#Function that do maths to calculate how many days left before expiration
def expiryMaths(expiry):
    tTmp = datetime.today().strftime('%Y-%m-%d')
    tExp = datetime.date(datetime.strptime(expiry, "%Y-%m-%dT%H:%M:%SZ"))
    tNow = datetime.date(datetime.strptime(tTmp, "%Y-%m-%d"))
    daysBeforeExp = tExp - tNow
    return daysBeforeExp.days

#Print the final output (Format --> Days before expiration)
daysBeforeExpI = int(expiryMaths(licenceEXP))

#Uncomment this only for debug, to simulate a number of day for the licence expiration
#daysBeforeExpI = 0

if daysBeforeExpI > varOk:
    print("OK : Licence expires in : "+str(daysBeforeExpI)+" days.")
    sys.exit(0)
    pass

if daysBeforeExpI < varWarning:
    if daysBeforeExpI <= varCritical:
        print("CRITICAL : Licence expires in : "+str(daysBeforeExpI)+" days.")
        sys.exit(2)
        pass
    print("WARNING : Licence expires in : "+str(daysBeforeExpI)+" days.")
    sys.exit(1)
    pass
